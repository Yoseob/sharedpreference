#!/usr/bin/env node
var fs = require('fs');
var app = require('../app');
var debug = require('debug')('SharedPreference:server');
var http = require('http');

var port =  80;
app.set('port', port);
var server = http.createServer(app);
var webrtc = require('webrtc.io').listen(server);
//sex




//var io = require('socket.io').listen(server);
// Start Binary.js server
var BinaryServer = require('binaryjs').BinaryServer;
//
var bs = BinaryServer({port: 8100 , host : '210.118.64.172'});
var roomName;
var self;



//what is up to date
bs.on('connection', function(client){
    // Incoming stream from browsers
    client.on('close' ,function(stream){
        var roomlist = bs._rooms[roomName] || [];
        var index  = roomlist.indexOf(client);
        roomlist.splice(index , 1);

    });

    client.on('stream', function(stream, meta){
        if(meta.sendType === 'p2p'){

            console.log('//////////////////////////////');

            var buf = [];
            var roomlist = bs._rooms[meta.roomname] || [];
            if(meta.filetype === 'init'){
                roomName = meta.roomname;
                roomlist.push(client);
                bs._rooms[meta.roomname] = roomlist;
                return ;
            }
            for(var i = 0; i < roomlist.length ; i ++){
                var tempClient = roomlist[i];
                console.log(tempClient);
                console.log(i+' = *****************************************');
                if(tempClient !== undefined && tempClient !== null){
                    var send = tempClient.createStream(meta);
                    stream.pipe(send);
                }
            }
        }else{
            /*
             var file = fs.createWriteStream(__dirname+'/' +meta.filename);
             stream.pipe(file);
             stream.on('data', function(data){
             stream.write({rx: data.length / meta.size});
             });

             stream.on('end' , function(){


             for(var i = 0; i < roomlist.length ; i ++){
             var tempClient = roomlist[i];
             console.log(i);
             console.log('----------------------------------');
             //tempClient.send(fs.createReadStream(__dirname +'/'+meta.filename));
             var send = tempClient.createStream(meta);
             stream.pipe(send);

             }
             });
             */
        }



    });
});


console.log('server running with ' + port + ' port');


//////////////// log ////////////
function log(logname) {
    console.log(logname);
}

webrtc.rtc.on('chat_msg', function (data, socket) {
    var roomList = webrtc.rtc.rooms[data.room] || [];

    for (var i = 0; i < roomList.length; i++) {
        var socketId = roomList[i];

        if (socketId !== socket.id) {
            var soc = webrtc.rtc.getSocket(socketId);

            if (soc) {
                soc.send(JSON.stringify({
                    "eventName": "receive_chat_msg",
                    "data": {
                        "messages": data.messages,
                        "color": data.color
                    }
                }), function (error) {
                    if (error) {
                        console.log(error);
                    }
                });
            }
        }
    }
});





server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Event listener for HTTP server "error" event.
 */


function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error('Port ' + port + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error('Port ' + port + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    debug('Listening on port ' + server.address().port);
}
