#!/usr/bin/env node
var fs = require('fs');
var app = require('../app');
var debug = require('debug')('SharedPreference:server');
var http = require('http');

var port = parseInt(process.env.PORT, 10) || 80;
app.set('port', port);
var server = http.createServer(app);
var webrtc = require('webrtc.io').listen(server);


//var io = require('socket.io').listen(server);
// Start Binary.js server
//var BinaryServer = require('binaryjs').BinaryServer;
//
//var bs = BinaryServer({server: server});
//
//
//// Wait for new user connections
//bs.on('connection', function(client){
//    // Incoming stream from browsers
//
//    client.on('stream', function(stream, meta){
//        //
//        console.log('ing streamiung');
//        if (!fs.existsSync(meta.groupname)){
//            fs.mkdirSync(meta.groupname);
//        }
//        var file = fs.createWriteStream(__dirname+ '/'+ meta.groupname+'/'  + meta.filename);
//        stream.pipe(file);
//
//
//        stream.on('data', function(data){
//            stream.write({rx: data.length / meta.size});
//        });
//        //
//    });
//});


console.log('server running with ' + port + ' port');


//////////////// log ////////////
function log(logname) {
    console.log(logname);
}

webrtc.rtc.on('chat_msg', function (data, socket) {
    var roomList = webRTC.rtc.rooms[data.room] || [];

    for (var i = 0; i < roomList.length; i++) {
        var socketId = roomList[i];

        if (socketId !== socket.id) {
            var soc = webRTC.rtc.getSocket(socketId);

            if (soc) {
                soc.send(JSON.stringify({
                    "eventName": "receive_chat_msg",
                    "data": {
                        "messages": data.messages,
                        "color": data.color
                    }
                }), function (error) {
                    if (error) {
                        console.log(error);
                    }
                });
            }
        }
    }
});





server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error('Port ' + port + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error('Port ' + port + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    debug('Listening on port ' + server.address().port);
}
