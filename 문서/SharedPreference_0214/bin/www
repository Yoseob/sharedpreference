#!/usr/bin/env node


var app = require('../app');
var debug = require('debug')('SharedPreference:server');
var http = require('http');

var port = parseInt(process.env.PORT, 10) || 8000;
app.set('port', port);
var server = http.createServer(app);
var webrtc = require('webrtc.io').listen(server);
//var io = require('socket.io').listen(server);


console.log('server running with ' + 8100 + ' port');


//////////////// log ////////////
function log(logname) {
    console.log(logname);
}

webrtc.rtc.on('chat_msg', function (data, socket) {
    var roomList = webRTC.rtc.rooms[data.room] || [];

    for (var i = 0; i < roomList.length; i++) {
        var socketId = roomList[i];

        if (socketId !== socket.id) {
            var soc = webRTC.rtc.getSocket(socketId);

            if (soc) {
                soc.send(JSON.stringify({
                    "eventName": "receive_chat_msg",
                    "data": {
                        "messages": data.messages,
                        "color": data.color
                    }
                }), function (error) {
                    if (error) {
                        console.log(error);
                    }
                });
            }
        }
    }
});

//io.sockets.on('connection', function (socket){
//
//  function log(){
//    var array = [">>> "];
//    for (var i = 0; i < arguments.length; i++) {
//      array.push(arguments[i]);
//    }
//    socket.emit('log', array);
//  }
//
//  socket.on('message', function (message) {
//    log('Got message: ', message);
//    socket.broadcast.emit('message', message); // should be room only
//  });
//
//  socket.on('create or join', function (room) {
//    var numClients = io.sockets.clients(room).length;
//
//    log('Room ' + room + ' has ' + numClients + ' client(s)');
//    log('Request to create or join room', room);
//
//    if (numClients == 0){
//      socket.join(room);
//      socket.emit('created', room);
//    } else if (numClients < 9) {
//      io.sockets.in(room).emit('join', room);
//      socket.join(room);
//      socket.emit('joined', room);
//    } else { // max two clients
//      socket.emit('full', room);
//    }
//    socket.emit('emit(): client ' + socket.id + ' joined room ' + room);
//    socket.broadcast.emit('broadcast(): client ' + socket.id + ' joined room ' + room);
//
//  });
//
//});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error('Port ' + port + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error('Port ' + port + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    debug('Listening on port ' + server.address().port);
}
